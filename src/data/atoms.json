[
  {
    "symbol": "®",
    "id": "retrieve-register",
    "name": "Restore Register",
    "arity": 0,
    "keywords": ["restore", "retrieve", "register"],
    "tags": ["register"],
    "tagline": "Restore the value of the <a href='/misc/register'>register</a> (initially zero).",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "³",
    "id": "third-cla",
    "name": "First Input / Third Argument",
    "arity": 0,
    "keywords": ["1st", "3rd", "first", "third", "input", "command", "line", "argument", "100"],
    "tags": ["arguments"],
    "tagline": "Get the first input (third command line argument), or <code>100</code>.",
    "description": "If the program is run with at least one input (three arguments, ignoring the flags and the file/code), return the value of the first input. Otherwise, return <code>100</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁴",
    "id": "fourth-cla",
    "name": "Second Input / Fourth Argument",
    "arity": 0,
    "keywords": ["2nd", "4th", "second", "fourth", "input", "command", "line", "argument", "16"],
    "tags": ["arguments"],
    "tagline": "Get the second input (fourth command line argument), or <code>16</code>.",
    "description": "If the program is run with at least two inputs (four arguments, ignoring the flags and the file/code), return the value of the second input. Otherwise, return <code>16</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁵",
    "id": "fifth-cla",
    "name": "Third Input / Fifth Argument",
    "arity": 0,
    "keywords": ["3rd", "5th", "third", "fifth", "input", "command", "line", "argument", "10"],
    "tags": ["arguments"],
    "tagline": "Get the third input (fifth command line argument), or <code>10</code>.",
    "description": "If the program is run with at least three inputs (five arguments, ignoring the flags and the file/code), return the value of the third input. Otherwise, return <code>10</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁶",
    "id": "sixth-cla",
    "name": "Fourth Input / Sixth Argument",
    "arity": 0,
    "keywords": ["4th", "6th", "fourth", "sixth", "input", "command", "line", "argument", "space"],
    "tags": ["arguments"],
    "tagline": "Get the first input (third command line argument), or <code>\" \"</code>.",
    "description": "If the program is run with at least four inputs (six arguments, ignoring the flags and the file/code), return the value of the fourth input. Otherwise, return <code>\" \"</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁷",
    "id": "seventh-cla",
    "name": "Fifth Input / Seventh Argument",
    "arity": 0,
    "keywords": ["5th", "7th", "fifth", "seventh", "input", "command", "line", "argument", "100"],
    "tags": ["arguments"],
    "tagline": "Get the fifth input (seventh command line argument), or <code>\"\\n\"</code>.",
    "description": "If the program is run with at least five inputs (seven arguments, ignoring the flags and the file/code), return the value of the fifth input. Otherwise, return <code>\"\\n\"</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁸",
    "id": "chain-left",
    "name": "Chain Left Argument",
    "arity": 0,
    "keywords": ["link", "chain", "left", "argument", "empty", "list"],
    "tags": ["arguments"],
    "tagline": "Get the left argument of the link/chain, or <code>[]</code>.",
    "description": "If the current chain is monadic or dyadic, return the value of the left argument. Otherwise, return <code>[]</code>.",
    "synonyms": []
  },
  {
    "symbol": "⁹",
    "id": "chain-right",
    "name": "Chain Right Argument",
    "arity": 0,
    "keywords": ["link", "chain", "right", "argument", "256"],
    "tags": ["arguments"],
    "tagline": "Get the right argument of the link/chain, or <code>256</code>.",
    "description": "If the current chain is dyadic, return the value of the right argument. Otherwise, return <code>256</code>.",
    "synonyms": []
  },
  {
    "symbol": "Ɠ",
    "id": "eval-stdin",
    "name": "Evaluate STDIN",
    "arity": 0,
    "keywords": ["evaluate", "read", "line", "standard", "stdin", "input"],
    "tags": ["stdio"],
    "tagline": "Read and evaluate a single line from STDIN.",
    "description": "Read a line from standard input and evaluate it as Python code. Note that reading from STDIN is not usually as golfy or idiomatic as using the arguments tacitly; however, in certain circumstances, such as relying on the link or program being niladic for the alternative meanings of the argument nilads, it can actually save some bytes.",
    "synonyms": ["ɠŒV¤"]
  },
  {
    "symbol": "ƈ",
    "id": "char-stdin",
    "name": "Read Character from STDIN",
    "arity": 0,
    "keywords": ["read", "character", "standard", "stdin", "input"],
    "tags": ["stdio"],
    "tagline": "Read a single character from STDIN.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "ɠ",
    "id": "line-stdin",
    "name": "Read Line from STDIN",
    "arity": 0,
    "keywords": ["read", "line", "standard", "stdin", "input"],
    "tags": ["stdio"],
    "tagline": "Read a single line from STDIN.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "¬",
    "id": "logical-not",
    "name": "Logical NOT",
    "arity": 1,
    "keywords": ["logical", "not", "inverse", "boolean", "invert"],
    "tags": ["boolean", "vectorize"],
    "tagline": "Return <code>1</code> for falsy values and <code>0</code> otherwise.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "½",
    "id": "sqrt",
    "name": "Square Root",
    "arity": 1,
    "keywords": ["square", "root"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Returns the square root of the argument.",
    "description": "",
    "synonyms": ["*0.5$", "*.$"]
  },
  {
    "symbol": "!",
    "id": "factorial",
    "name": "Factorial / Pi Function",
    "arity": 1,
    "keywords": ["factorial"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Returns the factorial of the argument. For negative / non-integral values, return the result of the Pi function.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "A",
    "id": "abs",
    "name": "Absolute Value",
    "arity": 1,
    "keywords": ["absolute", "value", "positive"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Returns the absolute value (distance from zero) of the argument. Works for complex numbers.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "B",
    "id": "to-binary",
    "name": "Integer To Binary",
    "arity": 1,
    "keywords": ["convert", "integer", "binary", "base", "2", "two"],
    "tags": ["math", "number", "array", "vectorize"],
    "tagline": "Converts an integer to its binary representation (list of digits).",
    "description": "For floating-point numbers, this built-in adds the floating part to the last digit.",
    "synonyms": ["b2$"]
  },
  {
    "symbol": "C",
    "id": "complement",
    "name": "Complement",
    "arity": 1,
    "keywords": ["complement", "subtract", "1", "one"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Given <code>z</code>, compute <code>1 - z</code>.",
    "description": "",
    "synonyms": ["1_$"]
  },
  {
    "symbol": "D",
    "id": "to-decimal",
    "name": "Integer to Decimal",
    "arity": 1,
    "keywords": ["convert", "integer", "decimal", "base", "10", "ten"],
    "tags": ["math", "number", "array", "vectorize"],
    "tagline": "Converts an integer to its decimal representation (list of digits)",
    "description": "For floating-point numbers, this built-in adds the floating part to the last digit.",
    "synonyms": ["b10$"]
  },
  {
    "symbol": "E",
    "id": "all-equal",
    "name": "All Equal",
    "arity": 1,
    "keywords": ["check", "all", "equals"],
    "tags": ["array", "boolean"],
    "tagline": "Determine if all elements of a list are equal.",
    "description": "This is vacuously true for empty lists.",
    "synonyms": []
  },
  {
    "symbol": "F",
    "id": "flatten",
    "name": "Flatten List",
    "arity": 1,
    "keywords": ["flatten", "list", "array", "ravel"],
    "tags": ["array"],
    "tagline": "Flatten a list.",
    "description": "A flat list is a list such that every element is a single value (i.e. not a list itself). A way to think about it formally (as a recursive definition) is that a single value will be wrapped into a singleton list, and a list will have each element flattened and all elements concatenated together. Elements appear in the order of depth-first traversal.",
    "synonyms": ["ẎÐL"]
  },
  {
    "symbol": "G",
    "id": "grid",
    "name": "Format Grid",
    "arity": 1,
    "keywords": ["format", "grid", "2d", "two", "dimensional"],
    "tags": ["string", "array", "matrix"],
    "tagline": "Format a 2D array of values into a grid as a string.",
    "description": "Given a 2D array (a matrix) of values, attempt to convert it to a string such that the elements are right-aligned and spaced out evenly. It doesn't tend to work well if the array has more than two dimensions; it will try, but it often mixes spaces and/or newlines without properly converting to a string, which can cause strange output. This is mostly useful for rendering matrices of numbers or strings, either for ascii-art challenges or challenges with strict I/O formatting, or for debugging.",
    "synonyms": []
  },
  {
    "symbol": "H",
    "id": "halve",
    "name": "Halve",
    "arity": 1,
    "keywords": ["half", "halve", "divide", "2", "two"],
    "tags": ["math", "number"],
    "tagline": "Divide a number by two.",
    "description": "",
    "synonyms": ["÷2$"]
  },
  {
    "symbol": "I",
    "id": "increments",
    "name": "Increments",
    "arity": 1,
    "keywords": ["increments", "consecutive", "differences"],
    "tags": ["math", "number", "array", "vectorize"],
    "tagline": "Compute the consecutive forward differences of an array. Vectorizes at depth 1.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "J",
    "id": "range-of-length",
    "name": "Range of Length",
    "arity": 1,
    "keywords": ["range", "length", "index", "indices"],
    "tags": ["array", "number"],
    "tagline": "Given a list <code>x</code>, produce <code>[1, 2, ..., len(x)]</code>.",
    "description": "This built-in can also be thought of as \"get the indices to access this list\". If the argument is a single value, this returns <code>[1]</code>.",
    "synonyms": ["LR$"]
  },
  {
    "symbol": "K",
    "id": "join-on-space",
    "name": "Join on Space",
    "arity": 1,
    "keywords": ["join", "spaces"],
    "tags": ["array", "string"],
    "tagline": "Join a list using spaces as the separator.",
    "description": "",
    "synonyms": ["j” $"]
  },
  {
    "symbol": "L",
    "id": "length",
    "name": "Length",
    "arity": 1,
    "keywords": ["length", "size"],
    "tags": ["array"],
    "tagline": "Get the length of an array. Single elements give <code>1</code>.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "M",
    "id": "indices-of-max",
    "name": "Indices of Maximal Elements",
    "arity": 1,
    "keywords": ["indexes", "indices", "maximal", "maximum", "elements"],
    "tags": ["array"],
    "tagline": "Find the indices of elements that are maximal in a list.",
    "description": "This built-in will error on single values rather than automatically casting to range or singleton.",
    "synonyms": ["ẹṀ$"]
  },
  {
    "symbol": "N",
    "id": "negate",
    "name": "Negate",
    "arity": 1,
    "keywords": ["negate", "negative", "inverse", "invert", "additive"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Negate a number (multiply by <code>-1</code>).",
    "description": "",
    "synonyms": ["×-1$", "×-$", "0_$"]
  },
  {
    "symbol": "O",
    "id": "ord",
    "name": "Ord (character to codepoint)",
    "arity": 1,
    "keywords": ["ord", "codepoint", "character", "unicode"],
    "tags": ["string", "number", "vectorize"],
    "tagline": "Return the codepoint of a character. Numbers are left as-is.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "P",
    "id": "product",
    "name": "Product",
    "arity": 1,
    "keywords": ["product", "multiply", "multiplication", "reduce"],
    "tags": ["array", "math", "number"],
    "tagline": "Return the product of a list (left-reduce over <code>×</code> starting at <code>1</code>).",
    "description": "",
    "synonyms": ["×ƒ1", "×/"]
  },
  {
    "symbol": "Q",
    "id": "uniquify",
    "name": "Uniquify",
    "arity": 1,
    "keywords": ["unique", "uniquify", "remove", "duplicates", "values"],
    "tags": ["array"],
    "tagline": "Return the list with no duplicate elements, keeping the first occurrence of each.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "R",
    "id": "range",
    "name": "Range",
    "arity": 1,
    "keywords": ["range"],
    "tags": ["array", "number"],
    "tagline": "Return integers from 1 to N.",
    "description": "Floating point numbers get floored. Complex numbers cause an error. Non-positive integers return an empty list.",
    "synonyms": []
  },
  {
    "symbol": "S",
    "id": "sum",
    "name": "Sum",
    "arity": 1,
    "keywords": ["sum", "reduce", "addition"],
    "tags": ["math", "number", "array"],
    "tagline": "Return the sum of a list (left-reduce over <code>+</code> starting at <code>0</code>).",
    "description": "",
    "synonyms": ["+ƒ0", "+/"]
  },
  {
    "symbol": "T",
    "id": "truthy-indices",
    "name": "Indices of Truthy Values",
    "arity": 1,
    "keywords": ["indices", "indexes", "truthy", "true", "values", "mask", "boolean"],
    "tags": ["array", "boolean"],
    "tagline": "Return the indices of truthy values in a list.",
    "description": "Errors if given a single number; however, since characters are iterable (because they are single-character Python strings internally), they will just return <code>[1]</code>.",
    "synonyms": []
  },
  {
    "symbol": "U",
    "id": "upend",
    "name": "Upend / Reverse",
    "arity": 1,
    "keywords": ["upend", "reverse"],
    "tags": ["array", "vectorize"],
    "tagline": "Reverse an array. Vectorizes at depth 1.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "V",
    "id": "jelly-eval",
    "name": "Evaluate as Jelly Code",
    "arity": 1,
    "keywords": ["evaluate", "jelly", "source", "code"],
    "tags": ["vectorize"],
    "tagline": "Evaluate Jelly code niladically. Vectorizes at depth 1.",
    "description": "If the argument is a list, it applies Python's <code>str</code> function to each element and concatenates them before evaluating.",
    "synonyms": []
  },
  {
    "symbol": "W",
    "id": "wrap",
    "name": "Wrap",
    "arity": 1,
    "keywords": ["wrap", "surround", "singleton", "list"],
    "tags": ["array"],
    "tagline": "Wrap a value into a singleton array.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "X",
    "id": "random",
    "name": "Random Value",
    "arity": 1,
    "keywords": ["random", "choice", "randint"],
    "tags": ["random"],
    "tagline": "Random integer from <code>1</code> to </code>z</code> for an integer, or choose a random value from an array.",
    "description": "If the argument is a list, return a random value from it. For empty lists, return 0. If <code>z</code> is a positive integer, return a random integer from <code>1</code> to <code>z</code>. If <code>z</code> is <code>0</code>, return <code>0</code>. If <code>z</code> is negative, a decimal, or complex, error.",
    "synonyms": []
  },
  {
    "symbol": "Y",
    "id": "join-on-newline",
    "name": "Join on Newline",
    "arity": 1,
    "keywords": ["join", "newlines", "multiline", "lines", "breaks", "linefeeds"],
    "tags": ["array", "string"],
    "tagline": "Join a list using newlines as the separator.",
    "description": "",
    "synonyms": ["j”¶$"]
  },
  {
    "symbol": "Z",
    "id": "transpose",
    "name": "Zip / Transpose",
    "arity": 1,
    "keywords": ["zip", "transpose", "flip", "main", "diagonal"],
    "tags": ["matrix"],
    "tagline": "Transpose / flip a matrix; switch the rows and columns.",
    "description": "For a flat list, wraps it (each element becomes its own column, which means transpose then flips them all into one row). For a single value, if it's a number, error, and if it's a character, wrap it twice (because characters are internally single-character Python strings, which are iterable).",
    "synonyms": []
  },
  {
    "symbol": "~",
    "id": "bitwise-not",
    "name": "Bitwise NOT",
    "arity": 1,
    "keywords": ["bitwise", "not", "inverted", "inverse"],
    "tags": ["bitwise", "math", "number", "vectorized"],
    "tagline": "Compute the bitwise inverse of a number.",
    "description": "For integers, equivalent to <code>-1 - z</code>. Floating numbers get truncated. Complex numbers and single characters give <code>0</code>.",
    "synonyms": []
  },
  {
    "symbol": "°",
    "id": "deg-to-rad",
    "name": "Degress to Radians",
    "arity": 1,
    "keywords": ["convert", "degrees", "radians", "angles"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Convert a number of degrees into its radian representation.",
    "description": "",
    "synonyms": ["÷180×ØPƊ"]
  },
  {
    "symbol": "¹",
    "id": "identity",
    "name": "Identity",
    "arity": 1,
    "keywords": ["identity", "self", "same"],
    "tags": [],
    "tagline": "Return the argument.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "²",
    "id": "square",
    "name": "Square",
    "arity": 1,
    "keywords": ["squared"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Square a number.",
    "description": "",
    "synonyms": ["*2$"]
  },
  {
    "symbol": "Ạ",
    "id": "all",
    "name": "All",
    "arity": 1,
    "keywords": ["all", "truthy", "true"],
    "tags": ["array", "boolean"],
    "tagline": "Given a list, return <code>0</code> if it contains a falsy value, and <code>1</code> otherwise.",
    "description": "Empty lists are vacuously true (as they do not contain a falsy value) and return <code>1</code>.",
    "synonyms": []
  },
  {
    "symbol": "Ḅ",
    "id": "from-binary",
    "name": "Binary to Integer",
    "arity": 1,
    "keywords": ["convert", "binary", "integer", "base", "2", "two"],
    "tags": ["math", "number", "array"],
    "tagline": "Convert a list of digits from binary (base 2) to a number. Vectorizes at depth 1.",
    "description": "The digits don't actually need to be in the appropriate range or even integers. It just adds the last element, double the second last element, quadruple the third last element, etc.",
    "synonyms": ["ḅ2$"]
  },
  {
    "symbol": "Ḍ",
    "id": "from-decimal",
    "name": "Decimal to Integer",
    "arity": 1,
    "keywords": ["convert", "decimal", "integer", "base", "10", "ten"],
    "tags": ["math", "number", "array"],
    "tagline": "Convert a list of digits from decimal (base 10) to a number. Vectorizes at depth 1.",
    "description": "The digits don't actually need to be in the appropriate range or even integers. It just adds the last element, ten times the second last element, one hundred times the third last element, etc.",
    "synonyms": ["ḅ10$"]
  },
  {
    "symbol": "Ẹ",
    "id": "any",
    "name": "Any",
    "arity": 1,
    "keywords": ["any", "truthy"],
    "tags": ["array", "boolean"],
    "tagline": "Given a list, return <code>1</code> if it contains a truthy value, and <code>0</code> otherwise.",
    "description": "Empty lists are vacuously false (as they do not contain a truthy value) and return <code>1</code>.",
    "synonyms": []
  },
  {
    "symbol": "Ḥ",
    "id": "double",
    "name": "Double",
    "arity": 1,
    "keywords": ["double", "multiply", "multiplication", "2", "two"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Double a number (multiply by two).",
    "description": "",
    "synonyms": ["×2$"]
  },
  {
    "symbol": "Ị",
    "id": "insignificant",
    "name": "insignificant",
    "arity": 1,
    "keywords": ["insignificant", "less", "than", "1", "one", "small"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "insignificant; determine if the number's absolute value is less than or equal to 1.",
    "description": "In other words, it checks if a number is within the unit circle in the complex plain (including the edge). This is useful when you have a positive array and want to check for <code>1</code>s.",
    "synonyms": []
  },
  {
    "symbol": "Ḳ",
    "id": "split-at-space",
    "name": "Split at Space",
    "arity": 1,
    "keywords": ["split", "spaces"],
    "tags": ["string", "array"],
    "tagline": "Given a list (a string is a list of characters), split it at occurrences of <code>\" \"</code>.",
    "description": "",
    "synonyms": ["ṣ” $"]
  },
  {
    "symbol": "Ḷ",
    "id": "lowered-range",
    "name": "Lowered Range",
    "arity": 1,
    "keywords": ["lowered", "range"],
    "tags": ["array", "number", "vectorize"],
    "tagline": "Return the lowered range (from <code>0</code> to <code>z - 1</code>).",
    "description": "",
    "synonyms": ["R’$"]
  },
  {
    "symbol": "Ṃ",
    "id": "list-minimum",
    "name": "List Minimum",
    "arity": 1,
    "keywords": ["list", "minimum", "smallest", "least"],
    "tags": ["array", "number"],
    "tagline": "Given a list, return its minimum value. Return the argument itself if it is a single value.",
    "description": "",
    "synonyms": ["«/"]
  },
  {
    "symbol": "Ṇ",
    "id": "logical-not-flat",
    "name": "Logical NOT (Flat)",
    "arity": 1,
    "keywords": ["logical", "not", "flat"],
    "tags": ["boolean"],
    "tagline": "Given a value, return <code>0</code> if it is truthy and <code>1</code> otherwise. Does not vectorize.",
    "description": "",
    "synonyms": ["¬'"]
  },
  {
    "symbol": "Ọ",
    "id": "chr",
    "name": "Chr (codepoint to character)",
    "arity": 1,
    "keywords": ["chr", "codepoint", "character", "unicode"],
    "tags": ["string", "number", "vectorize"],
    "tagline": "Return the character for a given codepoint. Characters are left as-is.",
    "description": "Floating-point numbers are truncated.",
    "synonyms": []
  },
  {
    "symbol": "Ṛ",
    "id": "reverse",
    "name": "Reverse (Flat)",
    "arity": 1,
    "keywords": ["reverse", "flat"],
    "tags": ["array"],
    "tagline": "Reverse a list. Does not vectorize.",
    "description": "",
    "synonyms": ["U'"]
  },
  {
    "symbol": "Ṣ",
    "id": "sort",
    "name": "Sort",
    "arity": 1,
    "keywords": ["sort", "order"],
    "tags": ["array"],
    "tagline": "Sort a list from smallest to largest.",
    "description": "Sorting mixed lists may fail because it just directly compares the elements with Python's built-in comparison. If you need to sort a list of elements and some specific key function makes sense, consider the <a href='/quicks/sort-by'>Sort By Key Function (<code>Þ</code>)</a> quick.",
    "synonyms": []
  },
  {
    "symbol": "Ṭ",
    "id": "ones-at-indices",
    "name": "Ones at Indices",
    "arity": 1,
    "keywords": ["truthy", "ones", "indices", "indexes", "list", "array", "with", "values"],
    "tags": ["array", "number", "vectorize"],
    "tagline": "Return a boolean array with <code>1</code>s at the indices in the argument and <code>0</code>s elsewhere. Vectorizes at depth 1.",
    "description": "This is the right inverse of <a href='/atoms/truthy-indices'>Indices of Truthy Values (<code>T</code>)</a>.",
    "synonyms": []
  },
  {
    "symbol": "Ụ",
    "id": "grade-up",
    "name": "Grade Up",
    "arity": 1,
    "keywords": ["grade", "up", "list", "down"],
    "tags": ["array"],
    "tagline": "Grade up a list; that is, sort its indices by the corresponding values.",
    "description": "Indexing the graded list into the list (<code>Ụị$</code>) sorts the list. Grading up twice returns a permutation of the same length as the list where larger elements in the permutation correspond to larger elemenets in the original list (it ranks the elements). You can negate the values before grading to grade down (<code>NỤ$</code>).",
    "synonyms": []
  },
  {
    "symbol": "Ṿ",
    "id": "uneval",
    "name": "Uneval",
    "arity": 1,
    "keywords": ["unevaluate", "representation", "jelly"],
    "tags": ["string"],
    "tagline": "Uneval; return a string that evaluates to the argument.",
    "description": "This is the right inverse of <a href='/atoms/jelly-eval'>Evaluate as Jelly Code (<code>V</code>)</a>.",
    "synonyms": []
  },
  {
    "symbol": "Ẉ",
    "id": "length-of-each",
    "name": "Length of Each",
    "arity": 1,
    "keywords": ["length", "each", "map", "size"],
    "tags": ["array"],
    "tagline": "Get the length of each element of the list.",
    "description": "If passed a number, implicitly convert it into a range (so, it becomes <code>[1]</code> repeated <code>z</code> times).",
    "synonyms": ["L€"]
  },
  {
    "symbol": "Ỵ",
    "id": "split-at-newline",
    "name": "Split at Newline",
    "arity": 1,
    "keywords": ["split", "newlines", "linefeeds", "lines", "breaks"],
    "tags": ["string", "array"],
    "tagline": "Given a list (a string is a list of characters), split it at occurrences of <code>\"\\n\"</code>.",
    "description": "",
    "synonyms": ["ṣ”¶$"]
  },
  {
    "symbol": "Ȧ",
    "id": "any-and-all",
    "name": "Any and All",
    "arity": 1,
    "keywords": ["any", "all"],
    "tags": ["array", "boolean"],
    "tagline": "Given a list, return <code>0</code> if the list is empty or contains a falsy value when flattened and <code>1</code> otherwise.",
    "description": "This is commonly used in place of <a href='/atoms/all'>All (<code>Ạ</code>)</a> to avoid the vacuous truth, but keep in mind that it flattens, so <code>1,[2,0],3 Ȧ</code> is <code>0</code> even though <code>1,[2,0],3 Ạ</code> and <code>1,[2,0],3 Ẹ</code> both give <code>1</code>.",
    "synonyms": []
  },
  {
    "symbol": "Ḃ",
    "id": "bit",
    "name": "Bit",
    "arity": 1,
    "keywords": ["bit", "modulo", "remainder", "2", "two", "parity", "even", "odd"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Returns <code>z % 2</code> (parity of <code>z</code> for integers).",
    "description": "",
    "synonyms": ["%2$"]
  },
  {
    "symbol": "Ċ",
    "id": "ceiling",
    "name": "Ceiling",
    "arity": 1,
    "keywords": ["ceiling", "round", "up", "nearest", "integer"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Round up to the nearest integer (real) / real part (complex).",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ḋ",
    "id": "dequeue",
    "name": "Dequeue",
    "arity": 1,
    "keywords": ["dequeue", "all", "remove", "except", "but", "first", "element", "list", "starting", "second"],
    "tags": ["array"],
    "tagline": "Return all but the first element of a list (does not modify the list).",
    "description": "This will not error on empty lists because Python allows list slices to go out of range and just ignores the part that is out of bounds. For integers, auto-cast to range, so it returns <code>[2, 3, ..., z]</code>.",
    "synonyms": [""]
  },
  {
    "symbol": "Ė",
    "id": "enumerate",
    "name": "Enumerate",
    "arity": 1,
    "keywords": ["enumerate", "index", "each"],
    "tags": ["array"],
    "tagline": "Enumerate an array (<code>[[1, z[1]], [2, z[2]], ...]</code>).",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ḟ",
    "id": "floor",
    "name": "Floor",
    "arity": 1,
    "keywords": ["floor", "round", "down", "nearest", "integer"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Round down to the nearest integer (real) / imaginary part (complex).",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ġ",
    "id": "group-indices",
    "name": "Group Indices by Value",
    "arity": 1,
    "keywords": ["group", "indices", "corresponding", "values"],
    "tags": ["array"],
    "tagline": "Group the indices of a list by the corresponding values.",
    "description": "This returns a list of lists. Each number in <code>[1, 2, ..., len(z)]</code> will appear exactly once. Each sub-list will contain indices that map to the same value; that is, <code>i</code> and <code>j</code> are in the same sublist if and only if <code>z[i] == z[j]</code>. The sublists are ordered by the element they correspond to.",
    "synonyms": []
  },
  {
    "symbol": "Ḣ",
    "id": "head-monad",
    "name": "Head (First)",
    "arity": 1,
    "keywords": ["head", "first", "pop"],
    "tags": ["array"],
    "tagline": "Pop and return the first element of a list (modifies the list).",
    "description": "If the list is empty, returns zero. This mutates the original object itself, so <code>1,2,3 Ḣ,⁸Ɗ</code> yields <code>[1, [2, 3]]</code>, not <code>[1, [1, 2, 3]]</code>. If you do not want to modify the list, you can access the first element using <code>1ị$</code>; however, a clever trick you can employ is <code>ḷ/</code> (as long as your list isn't empty). This is technically less efficient because you reduce the whole list whereas random access is constant, but can save you a byte over <code>1ị$</code> if you would need the <code>$</code> to group those links.",
    "synonyms": []
  },
  {
    "symbol": "İ",
    "id": "reciprocal",
    "name": "Inverse / Reciprocal",
    "arity": 1,
    "keywords": ["multiplicative", "inverse", "reciprocal"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Return the reciprocal of a number.",
    "description": "The reciprocal of zero is infinity, which is consistent with <code>1 ÷ 0</code>.",
    "synonyms": ["1÷$"]
  },
  {
    "symbol": "Ṁ",
    "id": "list-maximum",
    "name": "List Maximum",
    "arity": 1,
    "keywords": ["list", "maximum", "largest", "biggest", "greatest"],
    "tags": ["array", "number"],
    "tagline": "Given a list, return its maximum value. Return the argument itself if it is a single value.",
    "description": "",
    "synonyms": ["»/"]
  },
  {
    "symbol": "Ṅ",
    "id": "print-newline",
    "name": "Print (with newline)",
    "arity": 1,
    "keywords": ["print", "output", "stdout", "standard", "with", "newline", "linefeed", "line", "break"],
    "tags": ["stdio"],
    "tagline": "Output <code>z</code> to STDOUT, with a trailing newline, and return <code>z</code>.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ȯ",
    "id": "print",
    "name": "Print (without newline)",
    "arity": 1,
    "keywords": ["print", "output", "stdout", "standard", "without", "newline", "linefeed", "line", "break"],
    "tags": ["stdio"],
    "tagline": "Output <code>z</code> to STDOUT, without a trailing newline, and return <code>z</code>.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ṗ",
    "id": "pop",
    "name": "Pop",
    "arity": 1,
    "keywords": ["pop", "all", "remove", "except", "but", "last", "element", "list", "ending", "second"],
    "tags": ["array"],
    "tagline": "Return all but the last element of a list (does not modify the list).",
    "description": "This will not error on empty lists because Python allows list slices to go out of range and just ignores the part that is out of bounds. For integers, auto-cast to range, so it returns <code>[1, 3, ..., z - 1]</code>.",
    "synonyms": [""]
  },
  {
    "symbol": "Ṙ",
    "id": "print-repr",
    "name": "Print String Representation",
    "arity": 1,
    "keywords": ["print", "output", "stdout", "standard", "string", "representation", "without", "newline", "linefeed", "line", "break"],
    "tags": ["stdio"],
    "tagline": "Output a string representation of <code>z</code> to STDOUT, without a trailing newline, and return <code>z</code> itself.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ṡ",
    "id": "sign",
    "name": "Sign / Conjugate",
    "arity": 1,
    "keywords": ["sign", "conjugate"],
    "tags": ["math", "number", "vectorize"],
    "tagline": "Return the sign (real), return the conjugate (complex).",
    "description": "For real numbers, if the number is positive, return <code>1</code>, if it is negative, return <code>-1</code>, and otherwise, return <code>0</code>. For a complex number <code>a + bi</code>, return <code>a - bi</code> (the <a href='https://en.wikipedia.org/wiki/Complex_conjugate'>complex conjugate</a>).",
    "synonyms": []
  },
  {
    "symbol": "Ṫ",
    "id": "tail-monad",
    "name": "Tail (First)",
    "arity": 1,
    "keywords": ["tail", "last", "pop"],
    "tags": ["array"],
    "tagline": "Pop and return the last element of a list (modifies the list).",
    "description": "If the list is empty, returns zero. This mutates the original object itself, so <code>1,2,3 Ṫ,⁸Ɗ</code> yields <code>[3, [1, 2]]</code>, not <code>[3, [1, 2, 3]]</code>. If you do not want to modify the list, you can access the last element using <code>0ị$</code>; however, a clever trick you can employ is <code>ṛ/</code> (as long as your list isn't empty). This is technically less efficient because you reduce the whole list whereas random access is constant, but can save you a byte over <code>0ị$</code> if you would need the <code>$</code> to group those links.",
    "synonyms": []
  },
  {
    "symbol": "Ẇ",
    "id": "sublists",
    "name": "Sublists",
    "arity": 1,
    "keywords": ["all", "non", "empty", "nonempty", "sublists", "continuous", "contiguous", "slices", "substrings"],
    "tags": ["array"],
    "tagline": "Return all non-empty contiguous slices ordered by increasing length then position.",
    "description": "The slices will be returned in increasing length, and for each length, they will be returned in left-to-right order based on their position in the original list. For example, <code>1,2,3Ẇ</code> returns <code>[[1], [2], [3], [1, 2], [2, 3], [1, 2, 3]]</code>.",
    "synonyms": []
  },
  {
    "symbol": "Ẋ",
    "id": "shuffle",
    "name": "Shuffle",
    "arity": 1,
    "keywords": ["shuffle", "randomly", "permute", "permutation", "reordering"],
    "tags": ["array"],
    "tagline": "Return a random permutation of a list.",
    "description": "Numbers are automatically cast to a range.",
    "synonyms": ["Œ!X$"]
  },
  {
    "symbol": "Ẏ",
    "id": "tighten",
    "name": "Tighten",
    "arity": 1,
    "keywords": ["tighten", "dump", "flatten", "one", "1", "layer", "level", "sublists", "inside"],
    "tags": ["array"],
    "tagline": "Tighten; dump sublists inside the main list (flatten by one level).",
    "description": "Sublists will be concatenated together. Single values are wrapped into a singleton list.",
    "synonyms": [";/"]
  },
  {
    "symbol": "Ż",
    "id": "prepend-zero",
    "name": "Prepend Zero",
    "arity": 1,
    "keywords": ["prepend", "0", "zero", "range"],
    "tags": ["array", "number"],
    "tagline": "Prepend <code>0</code> to <code>z</code>. For integers, return <code>[0, 1, ..., z]</code>.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "§",
    "id": "vectorizing-sum",
    "name": "Vectorizing Sum",
    "arity": 1,
    "keywords": ["vectorizing", "vectorized", "sum", "each"],
    "tags": ["math", "number", "array", "vectorize"],
    "tagline": "Sum; vectorizes at depth 1.",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "",
    "id": "",
    "name": "",
    "arity": 1,
    "keywords": [],
    "tags": [],
    "tagline": "",
    "description": "",
    "synonyms": []
  },
  {
    "symbol": "Ø½",
    "id": "one-two",
    "name": "[1, 2]",
    "arity": 0,
    "keywords": ["constant"],
    "tags": ["array", "math", "number"],
    "tagline": "Returns the list <code>[1, 2]</code>.",
    "description": "",
    "synonyms": ["1,2"]
  }
]
